name: This is workflow name


on:
  push:
    branches:
      - master

jobs:
  this-is-job-name:
    runs-on: ubuntu-latest
    env:
      extensions: mcrypt, curl, gd, intl, oauth, mysql, imagick, zip
      php-versions: '8.0'
      key: php-v8.0
      DB_HOSTNAME: ${{ secrets.DB_HOST_WORKFLOW }}
      DB_USER: ${{ secrets.DB_USER_WORKFLOW }}
      DB_PWD:
      DB_NAME: ${{ secrets.DB_NAME_WORKFLOW }}

    steps:
      
      - name: echo a string
        run: echo "Hello World"
      
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.php-versions }}
          extensions: ${{ env.extensions }}

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install composer dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist

#      - name: Install MySQL client
#        continue-on-error: true
#        uses: shogo82148/actions-setup-mysql@v1
#        with:
#          mysql-version: '8.0'

      - name: Install MySQL client
        uses: mirromutth/mysql-action@v1.1
        with:
          character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
          collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
          mysql version: '8.0' # Optional, default value is "latest". The version of the MySQL
          mysql database: ${{ secrets.DB_NAME_WORKFLOW }} # Optional, default value is "test". The specified database which will be create
          mysql root password: ${{ secrets.DB_PWD_WORKFLOW }} # Required if "mysql user" is empty, default is empty. The root superuser password
          mysql user: ${{ secrets.DB_USER_WORKFLOW }} # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
          mysql password: ${{ secrets.DB_PWD_WORKFLOW }} # Required if "mysql user" exists. The password for the "mysql user"
          run: |
            mysql -h ${{ secrets.DB_HOST_WORKFLOW }} -u ${{ secrets.DB_USER_WORKFLOW }} -p${{ secrets.DB_PWD_WORKFLOW }} -e 'SELECT version();'
            mysql -u${{ secrets.DB_USER_WORKFLOW }} -h${{ secrets.DB_HOST_WORKFLOW }} -p${{ secrets.DB_PWD_WORKFLOW }} -e 'create schema ${{ secrets.DB_NAME_WORKFLOW }};'
            mysql -u${{ secrets.DB_USER_WORKFLOW }} -h${{ secrets.DB_HOST_WORKFLOW }} -p${{ secrets.DB_PWD_WORKFLOW }} -e 'SHOW DATABASES;'
            mysql -u${{ secrets.DB_USER_WORKFLOW }} -h${{ secrets.DB_HOST_WORKFLOW }} -p${{ secrets.DB_PWD_WORKFLOW }} ${{ secrets.DB_NAME_WORKFLOW }} < db/database.sql

      - name: Replace placeholders in .env file
        run: |
          ALTER USER 'root'@'localhost' IDENTIFIED BY 'NewPassword';
          pwd
          ls
          echo ${{ github.workspace }}
          envsubst < .env.sample > .env

      - name: Restore Database
        continue-on-error: true
        run: |
          mysql -h ${{ secrets.DB_HOST_WORKFLOW }} -u ${{ secrets.DB_USER_WORKFLOW }} -e 'SELECT version();'
          mysql -u${{ secrets.DB_USER_WORKFLOW }} -h${{ secrets.DB_HOST_WORKFLOW }} -e 'create schema ${{ secrets.DB_NAME_WORKFLOW }};'

      - name: List Database and tables
        continue-on-error: true
        run: |
          mysql -u${{ secrets.DB_USER_WORKFLOW }} -h${{ secrets.DB_HOST_WORKFLOW }} -e 'SHOW DATABASES;'
          mysql -u${{ secrets.DB_USER_WORKFLOW }} -h${{ secrets.DB_HOST_WORKFLOW }} ${{ secrets.DB_NAME_WORKFLOW }} < db/database.sql
#          mysql -u${{ secrets.DB_USER_WORKFLOW }} -h${{ secrets.DB_HOST_WORKFLOW }} -e 'SHOW TABLES FROM ${{ secrets.DB_NAME_WORKFLOW }};'
          
          
      - name: Run tests
        continue-on-error: true
        run: |
          pwd
          ls
          cat ${{ github.workspace }}/.env
          ./vendor/bin/phpunit --exclude-group ignore --configuration ${{ github.workspace }}/phpunit.xml.dist  --log-junit php_unit_report.xml

      - name: Upload Unit Test Results
        continue-on-error: true
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results PHP
          path: ${{ github.workspace }}/php_unit_report.xml
